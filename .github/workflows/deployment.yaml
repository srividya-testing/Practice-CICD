name: CI Build & Helm Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev|stage|prod)"
        required: true
        default: "dev"
        type: choice
        options: [ "dev", "stage", "prod" ]
      image_tag:
        description: "Optional custom image tag (defaults to <git-sha>)"
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: srividya-testing/nodejs-starter
  CHART_DIR: charts/nodeapp
  RELEASE_NAME: nodeapp
  DEFAULT_NAMESPACE: app-demo

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_ref: ${{ steps.meta.outputs.image_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tag
        id: meta
        run: |
          TAG="${{ github.event.inputs.image_tag }}"
          if [ -z "$TAG" ]; then TAG="${GITHUB_SHA}"; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "image_ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.image_ref }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set environment variables from input
        id: envpick
        run: |
          ENV="${{ github.event.inputs.environment }}"
          if [ -z "$ENV" ]; then ENV="dev"; fi
          case "$ENV" in
            dev)  VALUES_FILE="values-dev.yaml"; NAMESPACE="${{ env.DEFAULT_NAMESPACE }}";;
            stage) VALUES_FILE="values-stage.yaml"; NAMESPACE="app-stage";;
            prod) VALUES_FILE="values-prod.yaml"; NAMESPACE="app-prod";;
            *) echo "Unknown environment: $ENV" && exit 1;;
          esac
          echo "env_name=$ENV" >> $GITHUB_OUTPUT
          echo "values_file=$VALUES_FILE" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Prepare kubeconfig (from secret)
        run: |
          if [ -z "${{ secrets.KUBECONFIG_B64 }}" ]; then
            echo "::error::KUBECONFIG_B64 secret is not set"; exit 1
          fi
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: Create namespace if not exists
        run: |
          kubectl get ns ${{ steps.envpick.outputs.namespace }} >/dev/null 2>&1 || \
          kubectl create ns ${{ steps.envpick.outputs.namespace }}

      - name: Helm upgrade --install
        run: |
          helm upgrade --install ${{ env.RELEASE_NAME }} ${{ env.CHART_DIR }} \
            -n ${{ steps.envpick.outputs.namespace }} \
            -f ${{ env.CHART_DIR }}/${{ steps.envpick.outputs.values_file }} \
            --set namespaceOverride=${{ steps.envpick.outputs.namespace }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ needs.build-and-push.outputs.image_ref##*: }}
